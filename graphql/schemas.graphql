# ------ Usuarios

""" Datos del Usuario """
type User {
  id: Int
  """ Nombre de Usuario """
  userName: String
  email: String
  """ 0 = Usuario, 1= Moderador, 2=Admin """
  role: Int
  """ URL a la imagen de avatar """
  image: String
  createdAt: String
  updatedAt: String
  lastLoginAt: String
  """ Post creados por el Usuario """
  posts: [Post]
  comments: [Comment]
}

""" Datos necesarios para Crear/Actualizar un Usuario """
input UserInput {
  """ Nombre de Usuario """
  userName: String!
  """ Email del Usuario """
  email: String!
  """ Password, 4 a 16 caracteres """
  password: String!
  """ URL de la imagen del Usuario """
  image: String
}

""" Roles posibles de Modificar """
enum Role {
  ADMIN
  USER
  MOD
}
""" Orden Posible para Usuarios """
enum UserOrder {
  """ ID ascendente """
  ID_ASC
  """ ID descendente """
  ID_DESC
  """ Fecha de Creación ascendente """
  CREATED_ASC
  """ Fecha de Creación descendente """
  CREATED_DESC
  """ Fecha de ultima Modificación ascendente """
  UPDATED_ASC
  """ Fecha de ultima Modificación descendente """
  UPDATED_DESC
  """ Usuario, orden Alfabetico, ascendente """
  USERNAME_ASC
  """ Usuario, orden Alfabetico, descendente """
  USERNAME_DESC
  """ Cantidad de Posts ascendente """
  POST_ASC
  """ Cantidad de Posts descendente """
  POST_DESC
}

""" Info de User Loggeado """
type AuthUser {
  """ token necesario para identificarse """
  token: String!
  """ Nombre del usuario """
  userName: String
}

# ------ Posts

""" Datos de un Post """
type Post {
  id: Int
  title: String
  message: String
  views: Int
  likes: Int
  dislikes: Int
  author: User
  comments: [Comment]
  tags: [Tag]
  createdAt: String
  updatedAt: String
}

# ------ Comentarios

""" Datos de un Comentario """
type Comment {
  id: Int
  message: String
  author: User
  post: Post
  createdAt: String
  updatedAt: String
}

""" Orden Posible para Etiquetas """
enum CommentOrder {
  """ ID ascendente """
  ID_ASC
  """ ID descendente """
  ID_DESC
  """ Fecha de Creación ascendente """
  CREATED_ASC
  """ Fecha de Creación descendente """
  CREATED_DESC
  """ Fecha de ultima Modificación ascendente """
  UPDATED_ASC
  """ Fecha de ultima Modificación descendente """
  UPDATED_DESC
  """ Nombre de la Etiqueta, orden alfabetico, ascendente """
  AUTHOR_ASC
  """ Nombre de la Etiqueta, orden alfabetico, descendente """
  AUTHOR_DESC
  """ Cantidad de Posts ascendente """
  POSTID_ASC
  """ Cantidad de Posts descendente """
  POSTID_DESC
}

# ------ Tags

""" Datos de las Etiquetas """
type Tag {
  id: Int
  """ nombre de la Etiqueta """
  name: String
  createdAt: String
  updatedAt: String
  """ Posts en los que se encuentra """
  posts: [Post]
}


""" Orden Posible para Etiquetas """
enum TagOrder {
  """ ID ascendente """
  ID_ASC
  """ ID descendente """
  ID_DESC
  """ Fecha de Creación ascendente """
  CREATED_ASC
  """ Fecha de Creación descendente """
  CREATED_DESC
  """ Fecha de ultima Modificación ascendente """
  UPDATED_ASC
  """ Fecha de ultima Modificación descendente """
  UPDATED_DESC
  """ Nombre de la Etiqueta, orden alfabetico, ascendente """
  NAME_ASC
  """ Nombre de la Etiqueta, orden alfabetico, descendente """
  NAME_DESC
  """ Cantidad de Posts ascendente """
  POST_ASC
  """ Cantidad de Posts descendente """
  POST_DESC
}

# ------ Queries

""" Funciones para la Busqueda """
type Query {
  # User
  """ Obtener todos los Usuarios """
  getUsers(userName: String, role: Role, count: Int, offset: Int, order: UserOrder): [User]
  """ Obtener un Usuario """
  getUser(id: ID!): User
  """ Datos del Usuario loggeado """
  me: User
  """ Chequea si esta habilitado el nombre de Usuario """
  isUserName(userName: String): Boolean
  """ Chequea si existe el mail """
  isEmail(email: String): Boolean
  # Post
  getPosts(count: Int, offset: Int): [Post]
  getPost(id: Int!): Post
  getPostByTitle(title: String!): [Post]
  # Tag
  """ Obtiene todos las Etiquetas o por nombre, ordenadas """
  getTags(name: String, count: Int, offset: Int, order: TagOrder): [Tag]
  """ Obtiene Una Etiqueta por ID """
  getTag(id: Int!): Tag
  # Comments
  """ Busca los comentarios de todos los Posts """
  getComments(userName: String, count: Int, offset: Int, order: CommentOrder): [Comment]
}

# ------ Mutations

""" Funciones para los cambios """
type Mutation {
  """ Para Loggearse """
  logIn(userName: String!, password: String!): AuthUser
  """ Registrarse, Password de 4 caracteres minimo, Nombre de Usuario y Email unicos """
  signIn(input: UserInput!): AuthUser
  """ Actualizar Usuario, debe estar Loggeado """
  updateUser(newUser: UserInput!, oldUser: UserInput!): AuthUser
  """ Admin Cambia Roles de Usuario """
  changeRole(userId: ID!, role: Role!): User
  """ Admin Borra Usuarios """
  deleteUser(id: ID!): User
  # Post
  createPost(title: String!, message: String!, tagList: [String]): Post
  updatePost(id: Int!, title: String, message: String, tagList: [String]): Post
  deletePost(id: Int!): Post
  viewPost(id: Int!): Post
  # Comment
  """ Crear un Comentario en un post. Debe estar loggeado """
  createComment(postId: Int!, message: String!): Comment
  """ Edita un Comentario. Debe estar loggeado, Autor o MOD o ADMIN """
  editComment(id: Int!, message: String!): Comment
  """ Borrar un Comentario. Debe estar loggeado, Autor o MOD o ADMIN """
  deleteComment(id: Int!): Comment
  # Like
  giveLike(postId: Int!): Boolean
  giveDislike(postId: Int!): Boolean
  # Tag
  """ Borra un Tag, Solo Admin, Si no esta asociado a ningun Post """
  deleteTag(id: Int!): Tag
}
